datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STAFF
  FACILITY
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum JobStatus {
  OPEN
  CLOSED
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique 
  password   String
  phone      String
  stripeId   String?
  role   Role
  status     UserStatus  @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  staffProfile StaffProfile?
  facilityProfile FacilityProfile?
}

model StaffProfile {
   id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @unique @db.ObjectId
  firstname           String
  lastname            String
  about               String?
  title               String
  skills              String[]
  profileImage        String?
  profileSetupComplete Boolean @default(false)
  resumeUrl           String?
  user                User     @relation(fields: [userId], references: [id])
  jobApplication      JobApplication[]
}

model FacilityProfile {
   id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  name            String
  facilityType    String
  description     String?
  address         String
  city            String?
  state           String?
  country         String?
  profileImage    String?       
  jobPosts        JobPost[]
  user            User     @relation(fields: [userId], references: [id])
}

model JobPost {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  facilityId      String @db.ObjectId
  title           String
  description     String
  parkingPay      Float?
  scrubsProvided  Boolean
  experience      String
  location        String
  shifts          String
  startDate       DateTime
  endDate         DateTime
  housing         String
  procedures      String[]
  patientPopulation String
  mie             Float?
  bonus           Float?
  tags            String[]
  paymentPerDay   Float
  status          JobStatus         @default(OPEN)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  applications    JobApplication[]
  facilityProfile FacilityProfile   @relation(fields: [facilityId], references: [id])
}

model JobApplication {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  jobId         String  @db.ObjectId
  staffId       String  @db.ObjectId
  status        ApplicationStatus @default(PENDING)
  jobPost       JobPost         @relation(fields: [jobId], references: [id])
  staffProfile  StaffProfile    @relation(fields: [staffId], references: [id])
  payment       Payment?
}

model Payment {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  applicationId         String @unique @db.ObjectId
  stripePaymentIntentId String
  invoiceId             String
  amount                Float
  adminFee              Float
  netAmount             Float
  status                String
  jobApplication        JobApplication?   @relation(fields: [applicationId], references: [id])
}

