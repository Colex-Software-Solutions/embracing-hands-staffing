datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STAFF
  FACILITY
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum JobStatus {
  OPEN
  CLOSED
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  email              String       @unique 
  password           String
  phone              String
  role               Role
  status             UserStatus   @default(PENDING)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  staffProfile       StaffProfile?
  facilityProfile    FacilityProfile?
  documents          Document[]
  passwordReset      PasswordReset[]
}

model StaffProfile {
  id                             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                         String   @unique @db.ObjectId
  firstname                      String
  lastname                       String
  dateOfBirth                    DateTime?
  address                        String?
  referredBy                     String?
  emergencyContactName           String?
  emergencyContactPhone          String?
  position                       String?
  availableStartDate             DateTime?
  desiredPay                     Float?
  employmentDesired              String?
  licensure                      Licensure[]
  hasLicenseIssues               Boolean?
  licenseIssuesExplanation       String?
  hasConviction                  Boolean?
  convictionExplanation          String?
  hasPrisonRecord                Boolean?
  prisonRecordExplanation        String?
  hasPendingCriminalCase         Boolean?
  pendingCriminalCaseExplanation String?
  awareOfMalpracticeSuit         Boolean?
  malpracticeSuitExplanation     String?
  references                     Reference[]
  employmentHistory              EmploymentHistory[]
  staffSchoolInfo                StaffSchoolInfo[]
  electronicSignatureDisclaimer  String?
  signatureDate                  DateTime?
  about                          String?
  title                          String
  skills                         String[]
  profileImage                   String?
  shifts                         Shift[]
  profileSetupComplete           Boolean   @default(false)
  favoriteJobPostIds             String[]
  user                           User      @relation(fields: [userId], references: [id])
  jobApplication                 JobApplication[]
}

model StaffSchoolInfo {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  schoolName                     String
  schoolAddress                  String
  startDate                      DateTime
  endDate                        DateTime
  degreeReceived                 String
  staffProfileId  String      @db.ObjectId
  staffProfile    StaffProfile @relation(fields: [staffProfileId], references: [id])
}

model Licensure {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  licensureNumber String
  state           String
  expirationDate  DateTime
  staffProfileId  String      @db.ObjectId
  staffProfile    StaffProfile @relation(fields: [staffProfileId], references: [id])
}

type Reference {
  firstname        String
  lastname         String
  address          String
  phone            String
}

model EmploymentHistory {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  company         String
  jobTitle        String
  address         String
  employedFrom    DateTime
  employedTo      DateTime
  supervisor      String
  payRate         Float?
  phoneNumber     String
  staffProfileId  String      @db.ObjectId
  staffProfile    StaffProfile @relation(fields: [staffProfileId], references: [id])
}

model Document {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  documentUrl  String
  name         String
  expiryDate   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Invoice {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  facilityName      String
  facilityAddress   String
  jobPostId         String           @db.ObjectId
  invoiceNumber     Int
  paid              Boolean
  items             Json
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  jobPost           JobPost          @relation(fields: [jobPostId], references: [id])
}

model PasswordReset {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  code         String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model FacilityProfile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  name         String
  facilityType String
  description  String?
  address      String
  city         String?
  state        String?
  country      String?
  latitude     Float
  longitude    Float
  profileImage String?       
  jobPosts     JobPost[]
  user         User      @relation(fields: [userId], references: [id])
}

model JobPost {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  facilityId       String        @db.ObjectId
  title            String
  description      String
  scrubsProvided   Boolean
  experience       String
  location         String
  latitude         Float
  longitude        Float
  shiftsTime       String
  startDate        String
  endDate          String
  housing          String
  procedures       String[]
  patientPopulation String
  tags             String[]
  shifts           Shift[]
  status           JobStatus     @default(OPEN)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  applications     JobApplication[]
  invoices         Invoice[]
  facilityProfile  FacilityProfile @relation(fields: [facilityId], references: [id])
}

model JobApplication {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  jobId          String        @db.ObjectId
  staffId        String        @db.ObjectId
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  status         ApplicationStatus @default(PENDING)
  jobPost        JobPost       @relation(fields: [jobId], references: [id])
  staffProfile   StaffProfile  @relation(fields: [staffId], references: [id])
}



enum Status {
  Scheduled
  InProgress
  OnBreak
  Completed
  Confirmed
}

model Shift {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  jobPostId       String      @db.ObjectId
  staffProfileId  String      @db.ObjectId
  start           DateTime
  end             DateTime
  status          Status      @default(Scheduled)
  clockInTime     DateTime?
  clockOutTime    DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  jobPost         JobPost     @relation(fields: [jobPostId], references: [id])
  staffProfile    StaffProfile @relation(fields: [staffProfileId], references: [id])
  breaks          Break[]     // This line adds a list of Breaks related to the Shift
}

model Break {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  start           DateTime
  end             DateTime?
  shiftId         String      @db.ObjectId
  shift           Shift       @relation(fields: [shiftId], references: [id])
}
